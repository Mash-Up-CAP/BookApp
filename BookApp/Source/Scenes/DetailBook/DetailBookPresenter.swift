//
//  DetailBookPresenter.swift
//  BookApp
//
//  Created by Julia on 2023/03/09.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailBookPresentationLogic {
    func presentFetchBook(response: DetailBook.FetchBook.Response)
    func presentFetchBookError(response: DetailBook.FetchBook.Response.Error)
}

final class DetailBookPresenter: DetailBookPresentationLogic {
    
    weak var viewController: DetailBookDisplayLogic?

    func presentFetchBook(response: DetailBook.FetchBook.Response) {
          let book = response.book
          let authors = book.author?.joined(separator: ", ") ?? "작자미상"
          let categories = book.categories?.joined(separator: " | ") ?? "None"
          let pageCount = book.pageCount ?? 0
          let displayedBook = DetailBook.FetchBook.ViewModel.DisplayedBook(title: book.title,
                                                                            author: authors,
                                                                            thumbnailLink: book.thumbnailLink ?? "",
                                                                            pageCount: "\(pageCount)쪽",
                                                                            categories: categories,
                                                                            description: book.description ?? "",
                                                                            publisher: book.publisher ?? "",
                                                                            publishedDate: book.publishedDate ?? "")
        Task { @MainActor in
            viewController?.displayFetchBook(viewModel: displayedBook)
        }
    }
    
    func presentFetchBookError(response: DetailBook.FetchBook.Response.Error) {
        let viewModel = DetailBook.FetchBook.ViewModel.Error(message: response.message)
        Task { @MainActor in
            self.viewController?.displayFetchBookError(viewModel: viewModel)
        }
    }

}
